//*****************************************************************************
//*****************************************************************************
//  FILENAME:  UART_MIRR.h
//  Version: 5.2, Updated on 2009/3/31 at 12:8:11
//  Generated by PSoC Designer 5.0.423.0
//
//  DESCRIPTION:  UART User Module C Language interface file for the
//                22/24/25/26/27xxx PSoC family of devices.
//-----------------------------------------------------------------------------
//      Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************

// include the global header file
#include <m8c.h>

#define UART_MIRR_RXBUF_ENABLE 1

//-------------------------------------------------
// Prototypes of the UART_MIRR API.
//-------------------------------------------------

#if ( UART_MIRR_RXBUF_ENABLE )
extern char UART_MIRR_aRxBuffer[];
extern BYTE UART_MIRR_bRxCnt;
extern BYTE UART_MIRR_fStatus;
#endif



// Create pragmas to support proper argument and return value passing

#pragma fastcall16  UART_MIRR_SetTxIntMode
#pragma fastcall16  UART_MIRR_EnableInt
#pragma fastcall16  UART_MIRR_DisableInt
#pragma fastcall16  UART_MIRR_Start
#pragma fastcall16  UART_MIRR_Stop
#pragma fastcall16  UART_MIRR_SendData
#pragma fastcall16  UART_MIRR_bReadTxStatus
#pragma fastcall16  UART_MIRR_bReadRxData
#pragma fastcall16  UART_MIRR_bReadRxStatus
#pragma fastcall16  UART_MIRR_PutSHexByte
#pragma fastcall16  UART_MIRR_PutSHexInt
#pragma fastcall16  UART_MIRR_CPutString
#pragma fastcall16  UART_MIRR_PutString
#pragma fastcall16  UART_MIRR_PutChar
#pragma fastcall16  UART_MIRR_Write
#pragma fastcall16  UART_MIRR_CWrite

#pragma fastcall16  UART_MIRR_cGetChar
#pragma fastcall16  UART_MIRR_cReadChar
#pragma fastcall16  UART_MIRR_iReadChar
#pragma fastcall16  UART_MIRR_IntCntl
#pragma fastcall16  UART_MIRR_TxIntMode
#pragma fastcall16  UART_MIRR_PutCRLF

#if ( UART_MIRR_RXBUF_ENABLE )
#pragma fastcall16  UART_MIRR_CmdReset
#pragma fastcall16  UART_MIRR_bCmdCheck
#pragma fastcall16  UART_MIRR_bErrCheck
#pragma fastcall16  UART_MIRR_bCmdLength
#pragma fastcall16  UART_MIRR_szGetParam
#pragma fastcall16  UART_MIRR_szGetRestOfParams
#endif

//**************************************************
// Prototypes of UART API.
//**************************************************
extern void  UART_MIRR_SetTxIntMode(BYTE bTxIntMode);
extern void  UART_MIRR_EnableInt(void);
extern void  UART_MIRR_DisableInt(void);
extern void  UART_MIRR_Start(BYTE bParitySetting);
extern void  UART_MIRR_Stop(void);
extern void  UART_MIRR_SendData(BYTE bTxData);
extern BYTE  UART_MIRR_bReadTxStatus(void);
extern BYTE  UART_MIRR_bReadRxData(void);
extern BYTE  UART_MIRR_bReadRxStatus(void);

// High level TX functions
extern void   UART_MIRR_CPutString(const BYTE * szRomString);
extern void   UART_MIRR_PutString(BYTE * szRamString);
extern void   UART_MIRR_PutChar(CHAR cData);
extern void   UART_MIRR_Write(BYTE * szRamString, BYTE bCount);
extern void   UART_MIRR_CWrite(const BYTE * szRomString, INT iCount);
extern void   UART_MIRR_PutSHexByte(BYTE bValue);
extern void   UART_MIRR_PutSHexInt(INT iValue);
extern void   UART_MIRR_PutCRLF(void);
extern void   UART_MIRR_TxIntMode(BYTE bMask);

// High level RX functions
extern CHAR   UART_MIRR_cGetChar(void);
extern CHAR   UART_MIRR_cReadChar(void);
extern INT    UART_MIRR_iReadChar(void);
extern void   UART_MIRR_IntCntl(BYTE bMask);

#if ( UART_MIRR_RXBUF_ENABLE )
extern void   UART_MIRR_CmdReset(void);
extern BYTE   UART_MIRR_bCmdCheck(void);
extern BYTE   UART_MIRR_bErrCheck(void);
extern BYTE   UART_MIRR_bCmdLength(void);
extern BYTE * UART_MIRR_szGetParam(void);
extern BYTE * UART_MIRR_szGetRestOfParams(void);
#endif

//-------------------------------------------------
// Defines for UART_MIRR API's.
//-------------------------------------------------



//------------------------------------
//  Parity masks
//------------------------------------
#define  UART_MIRR_PARITY_NONE        0x00
#define  UART_MIRR_PARITY_EVEN        0x02
#define  UART_MIRR_PARITY_ODD         0x06
//------------------------------------
//  Transmitter Status Register masks
//------------------------------------
#define  UART_MIRR_TX_COMPLETE        0x20
#define  UART_MIRR_TX_BUFFER_EMPTY    0x10

//------------------------------------
//  Receiver Status Register masks
//------------------------------------
#define  UART_MIRR_RX_ACTIVE          0x10
#define  UART_MIRR_RX_COMPLETE        0x08
#define  UART_MIRR_RX_REG_FULL        0x08
#define  UART_MIRR_RX_PARITY_ERROR    0x80
#define  UART_MIRR_RX_OVERRUN_ERROR   0x40
#define  UART_MIRR_RX_FRAMING_ERROR   0x20
#define  UART_MIRR_RX_ERROR           0xE0
#define  UART_MIRR_RX_NO_ERROR        0xE0          // This symbol is deprecated and will removed in the future

#define  UART_MIRR_RX_NO_DATA         0x01

#define  UART_MIRR_RX_BUF_ERROR           0xF0  // Mask for any Rx that may occur.
#define  UART_MIRR_RX_BUF_OVERRUN         0x10  // This indicates the software buffer has
                                                           // been over run.
#define  UART_MIRR_RX_BUF_CMDTERM         0x01  // Command terminator has been received.

// Interrupt control used with  UART_MIRR_IntCntl() function
#define UART_MIRR_ENABLE_RX_INT  0x01
#define UART_MIRR_ENABLE_TX_INT  0x02
#define UART_MIRR_DISABLE_RX_INT 0x00
#define UART_MIRR_DISABLE_TX_INT 0x00

// Interrupt Modes
#define UART_MIRR_INT_MODE_TX_REG_EMPTY 0x00
#define UART_MIRR_INT_MODE_TX_COMPLETE  0x01

//-------------------------------------------------
// Register Address Constants for UART_MIRR
//-------------------------------------------------

#pragma ioport  UART_MIRR_TX_CONTROL_REG:   0x04b           // Control register
BYTE            UART_MIRR_TX_CONTROL_REG;
#pragma ioport  UART_MIRR_TX_SHIFT_REG: 0x048               // TX Shift Register register
BYTE            UART_MIRR_TX_SHIFT_REG;
#pragma ioport  UART_MIRR_TX_BUFFER_REG:    0x049               // TX Buffer Register
BYTE            UART_MIRR_TX_BUFFER_REG;
#pragma ioport  UART_MIRR_TX_FUNC_REG:  0x148               // Function register
BYTE            UART_MIRR_TX_FUNC_REG;
#pragma ioport  UART_MIRR_TX_INPUT_REG: 0x149               // Input register
BYTE            UART_MIRR_TX_INPUT_REG;
#pragma ioport  UART_MIRR_TX_OUTPUT_REG:    0x14a           // Output register
BYTE            UART_MIRR_TX_OUTPUT_REG;
#pragma ioport  UART_MIRR_RX_CONTROL_REG:   0x04f           // Control register
BYTE            UART_MIRR_RX_CONTROL_REG;
#pragma ioport  UART_MIRR_RX_SHIFT_REG: 0x04c               // RX Shift Register register
BYTE            UART_MIRR_RX_SHIFT_REG;
#pragma ioport  UART_MIRR_RX_BUFFER_REG:    0x04e               // RX Buffer Register
BYTE            UART_MIRR_RX_BUFFER_REG;
#pragma ioport  UART_MIRR_RX_FUNC_REG:  0x14c               // Function register
BYTE            UART_MIRR_RX_FUNC_REG;
#pragma ioport  UART_MIRR_RX_INPUT_REG: 0x14d               // Input register
BYTE            UART_MIRR_RX_INPUT_REG;
#pragma ioport  UART_MIRR_RX_OUTPUT_REG:    0x14e           // Output register
BYTE            UART_MIRR_RX_OUTPUT_REG;

#pragma ioport  UART_MIRR_TX_INT_REG:       0x0df          // TX Interrupt Mask Register
BYTE            UART_MIRR_TX_INT_REG;
#pragma ioport  UART_MIRR_RX_INT_REG:       0x0df          // RX Interrupt Mask Register
BYTE            UART_MIRR_RX_INT_REG;

// Masks to use with UART_MIRR_TX_INT_REG and UART_MIRR_RX_INT_REG Registers
#define UART_MIRR_TX_INT_MASK         (0x04) // TX Interrupt register Mask
#define UART_MIRR_RX_INT_MASK         (0x08) // RX Interrupt register Mask


//-------------------------------------------
//       WARNING WARNING WARNING
// The following defines and function prototypes
// are for backwards compatibility only and
// should not be used for new designs.
//-------------------------------------------
#pragma fastcall16  bUART_MIRR_ReadTxStatus
#pragma fastcall16  bUART_MIRR_ReadRxData
#pragma fastcall16  bUART_MIRR_ReadRxStatus
extern BYTE  bUART_MIRR_ReadTxStatus(void);
extern BYTE  bUART_MIRR_ReadRxData(void);
extern BYTE  bUART_MIRR_ReadRxStatus(void);
//------------------------------------
//  Parity masks
//------------------------------------
#define  UART_PARITY_NONE        0x00
#define  UART_PARITY_EVEN        0x02
#define  UART_PARITY_ODD         0x06

//------------------------------------
//  Transmitter Status Register masks
//------------------------------------
#define  UART_TX_COMPLETE        0x20
#define  UART_TX_BUFFER_EMPTY    0x10

//------------------------------------
//  Receiver Status Register masks
//------------------------------------
#define  UART_RX_ACTIVE          0x10
#define  UART_RX_COMPLETE        0x08
#define  UART_RX_PARITY_ERROR    0x80
#define  UART_RX_OVERRUN_ERROR   0x40
#define  UART_RX_FRAMING_ERROR   0x20
#define  UART_RX_NO_ERROR        0xE0

//-------------------------------------------
//             END WARNING
//-------------------------------------------
// end of file UART_MIRR.h
